{"version":3,"file":"extension.js","mappings":"kCAAAA,EAAOC,QAAUC,QAAQ,S,GCCrBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,OACf,C,uGCpBA,eAIA,oBAAyBQ,GAcxB,IAAIC,EAAaC,EAAOC,SAASC,0BAChC,oCACAC,MAAOC,EAA+BC,KACrC,IAAIC,EAAQ,GAEZA,EAAMC,KAAK,SAuBd,SAAkBH,GACjB,QAA0CR,IAAtCI,EAAOQ,UAAUC,iBACpB,OAAOL,EAAWM,SAASC,IAAIC,OAKhC,IAAK,MAAMC,KAAmBb,EAAOQ,UAAUC,iBAAkB,CAChE,MAAMK,EAAOV,EAAWM,SAASC,IAAIG,KAC/BC,EAASF,EAAgBF,IAAIG,KACnC,GAAIA,EAAKE,WAAWD,GACnB,OAAOD,EAAKG,UAAUF,EAAOG,OAAS,E,CAKxC,OAAOd,EAAWM,SAASC,IAAIC,MAChC,CAxCuBO,CAASf,MAC7B,MAAMgB,EAAS,IAAIhB,EAAWiB,YAAYC,MAAK,CAACC,EAAGC,IAAMD,EAAEE,MAAMC,KAAOF,EAAEC,MAAMC,OAChF,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAOF,SAAUS,EAAG,CACvC,MAAMC,EAAYR,EAAOO,GAEzB,IAAK,IAAIA,EAAIC,EAAUH,MAAMC,KAAMC,GAAKC,EAAUC,IAAIH,OAAQC,EAAG,CAChE,MAAMD,EAAOtB,EAAWM,SAASoB,OAAOH,GACxCrB,EAAMC,KAAK,GAAGmB,EAAKK,WAAa,MAAML,EAAKM,O,CAGxCL,IAAMP,EAAOF,OAAS,GACzBZ,EAAMC,KAAK,M,OAIPP,EAAOiC,IAAIC,UAAUC,UAAU7B,EAAM8B,KAAK,OAEhDpC,EAAOqC,OAAOC,uBAAuB,gCAAkChC,EAAM8B,KAAK,MAAM,IAG1FtC,EAAQyC,cAAchC,KAAKR,EAC5B,EAsBA,wBAA+B,C","sources":["webpack://vscode-comgosu/external commonjs \"vscode\"","webpack://vscode-comgosu/webpack/bootstrap","webpack://vscode-comgosu/./src/extension.ts"],"sourcesContent":["module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\n\n// This method is called when your extension is activated\n// Your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n\n\t// Use the console to output diagnostic information (console.log) and errors (console.error)\n\t// This line of code will only be executed once when your extension is activated\n\t// console.log('Congratulations, your extension \"copy-code\" is now active!');\n\n\t// The command has been defined in the package.json file\n\t// Now provide the implementation of the command with registerCommand\n\t// The commandId parameter must match the command field in package.json\n\t// let disposable = vscode.commands.registerCommand('copy-code.helloWorld', () => {\n\t// \t// The code you place here will be executed every time your command is executed\n\t// \t// Display a message box to the user\n\t// \tvscode.window.showInformationMessage('Hello World from copy-code!');\n\t// });\n\tlet disposable = vscode.commands.registerTextEditorCommand(\n\t\t'vscode-comgosu.copyCodeWithLines',\n\t\tasync (textEditor: vscode.TextEditor, edit: vscode.TextEditorEdit) => {\n\t\t\tlet lines = [];\n\n\t\t\tlines.push(`Path: ${fileName(textEditor)}`);\n\t\t\tconst sorted = [...textEditor.selections].sort((a, b) => a.start.line - b.start.line);\n\t\t\tfor (let j = 0; j < sorted.length; ++j) {\n\t\t\t\tconst selection = sorted[j];\n\n\t\t\t\tfor (let j = selection.start.line; j <= selection.end.line; ++j) {\n\t\t\t\t\tconst line = textEditor.document.lineAt(j);\n\t\t\t\t\tlines.push(`${line.lineNumber + 1}: ${line.text}`);\n\t\t\t\t}\n\n\t\t\t\tif (j !== sorted.length - 1) {\n\t\t\t\t\tlines.push('...');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tawait vscode.env.clipboard.writeText(lines.join('\\n'));\n\n\t\t\tvscode.window.showInformationMessage('ComGosu: Copied with lines!\\n' + lines.join('\\n'));\n\t\t}\n\t);\n\tcontext.subscriptions.push(disposable);\n}\n\nfunction fileName(textEditor: vscode.TextEditor) {\n\tif (vscode.workspace.workspaceFolders === undefined) {\n\t\treturn textEditor.document.uri.fsPath;\n\t}\n\n\t// Try to create a relative path if document is inside a workspace.\n\t// Path will be in linux format.\n\tfor (const workspaceFolder of vscode.workspace.workspaceFolders) {\n\t\tconst path = textEditor.document.uri.path;\n\t\tconst wsPath = workspaceFolder.uri.path;\n\t\tif (path.startsWith(wsPath)) {\n\t\t\treturn path.substring(wsPath.length + 1); // + 1 for slash\n\t\t}\n\t}\n\n\t// Fall back to fs path.\n\treturn textEditor.document.uri.fsPath;\n}\n\n// This method is called when your extension is deactivated\nexport function deactivate() { }\n"],"names":["module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","context","disposable","vscode","commands","registerTextEditorCommand","async","textEditor","edit","lines","push","workspace","workspaceFolders","document","uri","fsPath","workspaceFolder","path","wsPath","startsWith","substring","length","fileName","sorted","selections","sort","a","b","start","line","j","selection","end","lineAt","lineNumber","text","env","clipboard","writeText","join","window","showInformationMessage","subscriptions"],"sourceRoot":""}